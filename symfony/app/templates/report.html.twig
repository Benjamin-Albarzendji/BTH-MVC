{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
<h1>Report</h1>


<div class="generalDivReport">





    <div id="kmom01" class="reportBox home">

        <h5>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h5>
        <p>Jag har tidigare använt objektorientering i TypeScript, JavaScript, Java och i Python. Jag har gjort flera projekt samt uppgifter och projekt på jobbet som kräver det. 
            Jag är van vid termerna av inheritance, encapsulation, polymorphism och abstraction.
        </p>

        <h5>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h5>
        <p>Man behöver förstå skillnaden på Object och Class. Man behöver förstå och använda public, private, protected och CONST variabler. Man bör veta hur man använder sig utav en constructor.</p>

        <h5>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h5>
        <p>Jag uppfattar den som komplex men modern. Koden är väldigt "modulär" och allt är på sin plats och har sin egen uppgift. Våra controllers agerar som både mottagare och sändebud, vilket fyller en otroligt viktig funktion. Det förvånade mig att Webpack användes här och att node var aktuellt. 
            Twig var väldigt enkelt att använda, och det är ett bra templating språk som jag har tidigare använt. Annars var Symfony väldigt lätt att använda och att förstå sig på.
        </p>

        <h5>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h5>
        <p>Jag finner Style Guiden är viktig att förhålla sig till. Det var även en intressant att läsa om PHPs "bredd" såsom att Recursion, Functional Programming och Namespaces. Jag är intresserad av att lära mig mer om hur databaser interagerar med PHP och mer om Templating.</p>

        <h5>Ditt TIL?</h5>
        <p>Mitt TIL har definitivt varit att använda Symfony. Det var mitt första MVC-ramverk som jag har använt mig utav när det gäller PHP. Det är kul att se likheterna men även skillnaderna! 
            Ett annat TIL var att lösa problem med Controllers och få dem att fungera på studentservern.
        </p>

    </div>

    <div id="kmom02" class="reportBox home">
        <h5>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h5>
        <div><p>Arv: Innebär att man ärver egenskaper, attribut och metoder(funktioner) från en annan klass. Man har rätt att överskriva dem och "förlänga" dem utan vidare problem. Detta är för att reducera mängden av replikerad kod. Kan uppstå problem om man ska ärva från flera ställen.</p>
        <p>
Komposition: Innebär att man skapar en klass som innehåller andra klasser. Detta är bra då man slipper att ärva och kan "sticka ihop" klasser utan vidare problem.

        </p>
    
    <p>Interface: Ett kontrakt som lovar vad en class skall innehålla. T.ex då kan vi säga att alla klasser som innehåller interfacet "Card" skall, på ett minimum, implementera allt som interfacet lovar. Då anses de vara ett "Card" class.</p>
<p>Trait: Trait är likt komposition men istället innebär det att metoder, attribut, etc kan "injekteras" i en klass och således får den egenskaperna som traiten utlovar. T.ex "Shuffle Cards" traitet skulle kunna implementeras i flera DeckOfCards klasser utan att de behöver replikera koden i sin egen klass eller ärva den. Detta innebär i praktiken att man skapa klasser med traits från en hel del källor utan att skapa själva klasser så som i komposition eller ärva dem.</p></div>
    </div>

    <h5>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h5>
    <p>Uppgiften var väldigt rolig att utföra. Jag har tidigare arbetat med MVC-mönstret men det var lite tufft att göra det i en helt ny miljö såsom Symfoni. Jag fick väldigt många problem, speciellt med Namespace men lyckades lösa det efter hand. Det finns en hel del förbättringspotential. Då koden är inte så elegant och hade behövt bättre kommentering. Designen är också rätt så dålig. </p>

    <h5>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h5>
    <p>Jag har tidigare arbetat med MVC. Jag gillar mönstret, och det är kul att stycka ut koden i sina egna containers. Det var som sagt tufft att arbeta med Namespacet, men det löste sig tillslut. Sessionerna utgjorde också ett problem men det var mest buggar jag hade implementerat i min egen kod, men det löste sig tillslut! </p>

    <h5>Vilket är din TIL för detta kmom?</h5>
    <p>Mitt TIL skulle defintiivt vara att hantera Symfony och sessioner, och speciellt hur man utförde en POST till API via formulär i session. Jag måste dock säga att Symfoni är mycket roligare att arbeta i än Node och Flask. Dock blir man förvirrad över hur mycket filer som existerar. Att hantera det och lösa buggar var definitvt ett stort TIL. </p>


    <div id="kmom03" class="reportBox home">

        <p>To be continued....</p>
    </div>

    <div id="kmom04" class="reportBox home">

        <p>To be continued....</p>
    </div>

    <div id="kmom05" class="reportBox home">
        <p>To be continued....</p>
    </div>

    <div id="kmom06" class="reportBox home">

        <p>To be continued....</p>

    </div>
    
</div>


{% endblock %}